{
  "application": "ml-training-pipelines",
  "keepWaitingPipelines": false,
  "limitConcurrent": true,
  "name": "internaltools-staging-use1-chef",
  "notifications": [],
  "parameterConfig": [
    {
      "default": "",
      "description": "Version of the App to deploy e.g. \"v23\". To deploy your branch use branch name without \"-deploy\" suffix e.g. \"jdoe.feature-branch-name\"",
      "hasOptions": false,
      "name": "gitRef",
      "pinned": true,
      "required": true
    },
    {
      "default": "false",
      "description": "Rollback mode will skip some of the stages like interface stage to speed up the rollback.",
      "hasOptions": true,
      "name": "rollback",
      "options": [
        {
          "value": "true"
        },
        {
          "value": "false"
        }
      ],
      "pinned": true,
      "required": false
    },
    {
      "default": "false",
      "description": "Force interface stage to apply changes from service yml even if there is no change",
      "hasOptions": true,
      "label": "forceApplyInterface",
      "name": "forceApplyInterface",
      "options": [
        {
          "value": "true"
        },
        {
          "value": "false"
        }
      ],
      "pinned": true,
      "required": false
    }
  ],
  "stages": [
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": true,
      "name": "Create GitHub Deployment",
      "parameters": {
        "autoMerge": "false",
        "description": "Deploy to internaltools-staging-use1-chef",
        "environment": "internaltools-staging-use1-chef",
        "gitReference": "${ parameters.gitRef }",
        "organization": "zendesk",
        "payload": "{\n  \"applicationName\": \"${ execution.application }\",\n\"githubActor\": \"${ trigger?.parentExecution?.trigger?.parameters?.githubActor ?: \"\" }\",\n\"manualActor\": \"${ trigger?.parentExecution?.trigger?.type != 'webhook' ? (trigger?.parentExecution?.trigger?.user ?: trigger.user) : '' }\",\n\"version\": \"${ parameters?.version ?: parameters?.gitRef }\"\n}\n",
        "project": "ml-training-pipelines",
        "requiredContexts": "[]"
      },
      "refId": "create-github-deployment",
      "type": "createGithubDeploymentJob"
    },
    {
      "comments": "${#stage('Self-Service Interface').context.jobStatus.jobState == 'Succeeded' ? '- Change id: '.concat(#stage('Self-Service Interface').context.change_ids) : ''}\n${#stage('Self-Service Interface').context.jobStatus.jobState == 'Succeeded' ? '- \u003ca href=\"'.concat(#stage('Self-Service Interface').context.status_ui_url).concat('\" target=\"_blank\"\u003eStatus from Interface UI\u003c/a\u003e') : ''}",
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": true,
      "name": "Self-Service Interface",
      "parameters": {
        "deployGroups": "\"internaltools-staging-use1-chef\"",
        "description": "${ parameters.gitRef }",
        "forceApply": "${ parameters.forceApplyInterface }",
        "gitCommit": "${ parameters.gitRef }",
        "gitRepo": "git@github.com:zendesk/ml-training-pipelines.git",
        "project": "${ execution.application }"
      },
      "refId": "self-service-interface",
      "requisiteStageRefIds": [
        "create-github-deployment"
      ],
      "stageEnabled": {
        "expression": "${ parameters.rollback != 'true' }",
        "type": "expression"
      },
      "type": "interfaceStagingJob"
    },
    {
      "account": "internaltools-staging-use1-chef",
      "application": "ml-training-pipelines",
      "cloudProvider": "kubernetes",
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "location": "ml-training-pipelines",
      "manifestName": "configMap deployed-version",
      "mode": "static",
      "name": "Read version",
      "refId": "read-version",
      "requisiteStageRefIds": [
        "self-service-interface"
      ],
      "type": "findArtifactsFromResource"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": true,
      "name": "Set deployment in progress",
      "parameters": {
        "deploymentId": "${ #stage( 'Create GitHub Deployment' ).context.id }",
        "description": "Deployment in progress",
        "environment": "internaltools-staging-use1-chef",
        "environmentURL": "https://spinnaker.zende.sk/#/applications/${ execution.application }/executions/details/${ execution['id'] }",
        "organization": "zendesk",
        "project": "ml-training-pipelines",
        "state": "in_progress",
        "targetURL": "https://spinnaker.zende.sk/#/applications/${ execution.application }/executions/details/${ execution['id'] }"
      },
      "refId": "set-deployment-in-progress",
      "requisiteStageRefIds": [
        "read-version"
      ],
      "type": "updateGithubDeploymentStatusJob"
    },
    {
      "account": "internaltools-staging-use1-chef",
      "cloudProvider": "kubernetes",
      "comments": "\u003cdiv style=\"padding: 15px; margin-bottom: 5px;\"\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-12\"\u003e\n            \u003cdl class=\"dl-horizontal\"\u003e\n                \u003cdiv\u003e\n                    \u003cdt\u003eLogs\u003c/dt\u003e\n                    \u003cdd\u003e\n                        \u003ca href=\"https://zendesk.datadoghq.com/logs/livetail?query=service%3Aml-training-pipelines+%40kubernetes.labels.track%3A${execution.id}+%40kubernetes.labels.role%3Ametaflow\"\u003eDatadog metaflow Logs\u003c/a\u003e\n                    \u003c/dd\u003e\n                \u003c/div\u003e\n            \u003c/dl\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n",
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "manifestArtifact": {
        "artifactAccount": "github_spin_acct3",
        "id": "metaflow.yml",
        "name": "metaflow.yml",
        "reference": "https://api.github.com/repos/zendesk/ml-training-pipelines/contents/kubernetes/manifests/staging/internaltools-staging-use1-chef/metaflow.yml",
        "type": "github/file",
        "version": "${ parameters.gitRef + \"-deploy\" }"
      },
      "moniker": {
        "app": "ml-training-pipelines",
        "detail": "/#/applications/${execution['application']}/executions/${execution['id']}"
      },
      "name": "Deploy metaflow.yml",
      "refId": "deploy-metaflow.yml",
      "requisiteStageRefIds": [
        "set-deployment-in-progress"
      ],
      "skipExpressionEvaluation": false,
      "source": "artifact",
      "stageEnabled": {
        "expression": "#stage('Read version')['status'] != 'SKIPPED'",
        "type": "expression"
      },
      "stageTimeoutMs": 900000,
      "trafficManagement": {
        "enabled": false,
        "options": {
          "enableTraffic": false,
          "services": []
        }
      },
      "type": "deployManifest"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": false,
      "name": "Deploy Succeeded",
      "preconditions": [
        {
          "context": {
            "expression": "${ #stageByRefId(\"deploy-metaflow.yml\").status == \"SUCCEEDED\" }",
            "failureMessage": "One of the previous steps failed"
          },
          "failPipeline": true,
          "type": "expression"
        }
      ],
      "refId": "deploy-succeeded",
      "requisiteStageRefIds": [
        "deploy-metaflow.yml"
      ],
      "type": "checkPreconditions"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": false,
      "name": "Deploy Failed",
      "preconditions": [
        {
          "context": {
            "expression": "${ #stageByRefId(\"deploy-metaflow.yml\").status == \"FAILED_CONTINUE\" }",
            "failureMessage": "One of the previous steps failed"
          },
          "failPipeline": false,
          "type": "expression"
        }
      ],
      "refId": "deploy-failed",
      "requisiteStageRefIds": [
        "deploy-metaflow.yml"
      ],
      "type": "checkPreconditions"
    },
    {
      "account": "internaltools-staging-use1-chef",
      "cloudProvider": "kubernetes",
      "comments": "\u003cdiv style=\"padding: 15px; margin-bottom: 5px;\"\u003e\n    \u003cdiv class=\"row\"\u003e\n        \u003cdiv class=\"col-md-12\"\u003e\n            \u003cdl class=\"dl-horizontal\"\u003e\n                \u003cdiv\u003e\n                    \u003cdt\u003eLogs\u003c/dt\u003e\n                    \u003cdd\u003e\n                        \u003ca href=\"https://zendesk.datadoghq.com/logs/livetail?query=service%3Aml-training-pipelines+%40kubernetes.labels.track%3A${execution.id}+%40kubernetes.labels.role%3Ametaflow\"\u003eDatadog metaflow Logs\u003c/a\u003e\n                    \u003c/dd\u003e\n                \u003c/div\u003e\n            \u003c/dl\u003e\n        \u003c/div\u003e\n    \u003c/div\u003e\n\u003c/div\u003e\n",
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "manifestArtifact": {
        "artifactAccount": "github_spin_acct3",
        "id": "previous-metaflow.yml",
        "name": "Previous metaflow.yml",
        "reference": "https://api.github.com/repos/zendesk/ml-training-pipelines/contents/kubernetes/manifests/staging/internaltools-staging-use1-chef/metaflow.yml",
        "type": "github/file",
        "version": "${ #stage('Read version').context.manifest.data.gitRef }"
      },
      "moniker": {
        "app": "ml-training-pipelines",
        "detail": "/#/applications/${execution['application']}/executions/${execution['id']}"
      },
      "name": "Deploy previous metaflow.yml",
      "refId": "deploy-previous-metaflow.yml",
      "requisiteStageRefIds": [
        "deploy-failed"
      ],
      "skipExpressionEvaluation": false,
      "source": "artifact",
      "stageEnabled": {
        "expression": "#stage('Read version')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "trafficManagement": {
        "enabled": false,
        "options": {
          "enableTraffic": false,
          "services": []
        }
      },
      "type": "deployManifest"
    },
    {
      "account": "internaltools-staging-use1-chef",
      "cloudProvider": "kubernetes",
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": true,
      "manifests": [
        {
          "apiVersion": "v1",
          "data": {
            "gitRef": "${ parameters.gitRef + \"-deploy\" }",
            "version": "${ parameters.gitRef }"
          },
          "kind": "ConfigMap",
          "metadata": {
            "annotations": {
              "strategy.spinnaker.io/versioned": "false"
            },
            "name": "deployed-version"
          }
        }
      ],
      "moniker": {
        "app": "ml-training-pipelines",
        "detail": "/#/applications/${execution['application']}/executions/${execution['id']}"
      },
      "name": "Record version",
      "namespaceOverride": "ml-training-pipelines",
      "refId": "record-version",
      "requisiteStageRefIds": [
        "deploy-succeeded"
      ],
      "skipExpressionEvaluation": false,
      "source": "text",
      "trafficManagement": {
        "enabled": false,
        "options": {
          "enableTraffic": false,
          "services": []
        }
      },
      "type": "deployManifest"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": true,
      "name": "GitHub Deployment Success",
      "parameters": {
        "deploymentId": "${ #stage( 'Create GitHub Deployment' ).context.id }",
        "description": "See Spinnaker for deployment details",
        "environment": "internaltools-staging-use1-chef",
        "environmentURL": "https://spinnaker.zende.sk/#/applications/${ execution.application }/executions/details/${ execution['id'] }",
        "organization": "zendesk",
        "project": "ml-training-pipelines",
        "state": "success",
        "targetURL": "https://spinnaker.zende.sk/#/applications/${ execution.application }/executions/details/${ execution['id'] }"
      },
      "refId": "github-deployment-success",
      "requisiteStageRefIds": [
        "deploy-succeeded"
      ],
      "type": "updateGithubDeploymentStatusJob"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": true,
      "failPipeline": false,
      "name": "GitHub Deployment Failure",
      "parameters": {
        "deploymentId": "${ #stage( 'Create GitHub Deployment' ).context.id }",
        "description": "See Spinnaker for deployment details",
        "environment": "internaltools-staging-use1-chef",
        "environmentURL": "https://spinnaker.zende.sk/#/applications/${ execution.application }/executions/details/${ execution['id'] }",
        "organization": "zendesk",
        "project": "ml-training-pipelines",
        "state": "failure",
        "targetURL": "https://spinnaker.zende.sk/#/applications/${ execution.application }/executions/details/${ execution['id'] }"
      },
      "refId": "github-deployment-failure",
      "requisiteStageRefIds": [
        "deploy-failed"
      ],
      "type": "updateGithubDeploymentStatusJob"
    },
    {
      "completeOtherBranchesThenFail": false,
      "continuePipeline": false,
      "failPipeline": true,
      "name": "Signal Execution Failure",
      "preconditions": [
        {
          "context": {
            "expression": "false",
            "failureMessage": "This stage failed in order to inform you that an error has occurred during\npipeline execution; see execution details for further information\n"
          },
          "failPipeline": true,
          "type": "expression"
        }
      ],
      "refId": "signal-execution-failure",
      "requisiteStageRefIds": [
        "deploy-previous-metaflow.yml",
        "github-deployment-failure"
      ],
      "stageEnabled": {
        "expression": "#stage('Deploy Failed')['status'] == 'SUCCEEDED'",
        "type": "expression"
      },
      "type": "checkPreconditions"
    }
  ]
}